// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package npool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplicationManagementClient is the client API for ApplicationManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationManagementClient interface {
	// Method Version
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	//
	//Create an application.
	CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
	//
	//Update an application's basic info.
	UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
	//
	//Delete an application. During Deleting, system will use apis to delete app group, delete app resources and app's policies in anubis.
	//Need apis:
	DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
	//
	//Create a role in app. When create a role, we can authorise policies to it or not.
	//Need APIs: https://anubis.npool.top/v1/role, https://anubis.npool.top/v1/authorise-role.
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
	//
	//Update role's policies.
	//Need APIs: https://anubis.npool.top/v1/authorise-role
	UpdateRolePolicies(ctx context.Context, in *UpdateRolePoliciesRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
	//
	//Update role's basic info.
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
	//
	//Delete role from app.
	//Need APIs: https://anubis.npool.top/v1/cancel-role-policies, https://anubis.npool.top/v1/remove-role.
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
	//
	//Set role to user. When set role to a user, we will use api to authorise policies to user.
	//Need APIs: https://anubis.npool.top/v1/user/role.
	SetUserRole(ctx context.Context, in *SetUserRoleRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
	//
	//Unset role of user. When unset role to user, we also need to use api to remove role from user.
	//Need APIs: https://anubis.npool.top/v1/remove-user.
	UnSetUserRole(ctx context.Context, in *UnSetUserRoleRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
	//
	//Get all roles of an application. When get roles, we need to get all infos of roles which include its policies.
	//Need APIs:  https://anubis.npool.top/v1/role/{role_id}/policies, https://pyramids.npool.top/v1/role/{RoleId}/users, https://user.npool.top/v1/user/{UserId}.
	GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error)
	//
	//Get users from app.
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	//
	//Get all roles of the user.
	GetUserRole(ctx context.Context, in *GetUserRoleRequest, opts ...grpc.CallOption) (*GetUserRoleResponse, error)
	//
	//Add users into app. When add users, admin can choose to authorise policies to user and authorise roles to user.
	//Need APIs: https://pyramids.npool.top/set-user-role, https://pyramids.npool.top/user/policies.
	CreateUsers(ctx context.Context, in *CreateUsersRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
	//
	//Create group in an application. When create a group, admin can add users into this group at the same time.
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
	//
	//Add users into group.
	AddGroupUsers(ctx context.Context, in *AddGroupUsersRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
	//
	//Remove users from group.
	DeleteGroupUsers(ctx context.Context, in *DeleteGroupUsersRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
	//
	//Update group info.
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
	//
	//Delete group from app. When Delete group, we also need to remove users out from group.
	//Need api: https://user.npool.top/v1/remove/group/users.
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
	//
	//Get groups from app.
	GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...grpc.CallOption) (*GetGroupsResponse, error)
	//
	//Create resource for app.
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
	//
	//Update resource of app.
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
	//
	//Get all resources from app.
	GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (*GetResourcesResponse, error)
	//
	//Delete resource from app.
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
}

type applicationManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationManagementClient(cc grpc.ClientConnInterface) ApplicationManagementClient {
	return &applicationManagementClient{cc}
}

func (c *applicationManagementClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/CreateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/UpdateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/DeleteApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) UpdateRolePolicies(ctx context.Context, in *UpdateRolePoliciesRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/UpdateRolePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) SetUserRole(ctx context.Context, in *SetUserRoleRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/SetUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) UnSetUserRole(ctx context.Context, in *UnSetUserRoleRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/UnSetUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	out := new(GetRolesResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetUserRole(ctx context.Context, in *GetUserRoleRequest, opts ...grpc.CallOption) (*GetUserRoleResponse, error) {
	out := new(GetUserRoleResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) CreateUsers(ctx context.Context, in *CreateUsersRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/CreateUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) AddGroupUsers(ctx context.Context, in *AddGroupUsersRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/AddGroupUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) DeleteGroupUsers(ctx context.Context, in *DeleteGroupUsersRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/DeleteGroupUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...grpc.CallOption) (*GetGroupsResponse, error) {
	out := new(GetGroupsResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/CreateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/UpdateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetResources(ctx context.Context, in *GetResourcesRequest, opts ...grpc.CallOption) (*GetResourcesResponse, error) {
	out := new(GetResourcesResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/GetResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, "/application.management.v1.ApplicationManagement/DeleteResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationManagementServer is the server API for ApplicationManagement service.
// All implementations must embed UnimplementedApplicationManagementServer
// for forward compatibility
type ApplicationManagementServer interface {
	// Method Version
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	//
	//Create an application.
	CreateApplication(context.Context, *CreateApplicationRequest) (*NoDataResponse, error)
	//
	//Update an application's basic info.
	UpdateApplication(context.Context, *UpdateApplicationRequest) (*NoDataResponse, error)
	//
	//Delete an application. During Deleting, system will use apis to delete app group, delete app resources and app's policies in anubis.
	//Need apis:
	DeleteApplication(context.Context, *DeleteApplicationRequest) (*NoDataResponse, error)
	//
	//Create a role in app. When create a role, we can authorise policies to it or not.
	//Need APIs: https://anubis.npool.top/v1/role, https://anubis.npool.top/v1/authorise-role.
	CreateRole(context.Context, *CreateRoleRequest) (*NoDataResponse, error)
	//
	//Update role's policies.
	//Need APIs: https://anubis.npool.top/v1/authorise-role
	UpdateRolePolicies(context.Context, *UpdateRolePoliciesRequest) (*NoDataResponse, error)
	//
	//Update role's basic info.
	UpdateRole(context.Context, *UpdateRoleRequest) (*NoDataResponse, error)
	//
	//Delete role from app.
	//Need APIs: https://anubis.npool.top/v1/cancel-role-policies, https://anubis.npool.top/v1/remove-role.
	DeleteRole(context.Context, *DeleteRoleRequest) (*NoDataResponse, error)
	//
	//Set role to user. When set role to a user, we will use api to authorise policies to user.
	//Need APIs: https://anubis.npool.top/v1/user/role.
	SetUserRole(context.Context, *SetUserRoleRequest) (*NoDataResponse, error)
	//
	//Unset role of user. When unset role to user, we also need to use api to remove role from user.
	//Need APIs: https://anubis.npool.top/v1/remove-user.
	UnSetUserRole(context.Context, *UnSetUserRoleRequest) (*NoDataResponse, error)
	//
	//Get all roles of an application. When get roles, we need to get all infos of roles which include its policies.
	//Need APIs:  https://anubis.npool.top/v1/role/{role_id}/policies, https://pyramids.npool.top/v1/role/{RoleId}/users, https://user.npool.top/v1/user/{UserId}.
	GetRoles(context.Context, *GetRolesRequest) (*GetRolesResponse, error)
	//
	//Get users from app.
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	//
	//Get all roles of the user.
	GetUserRole(context.Context, *GetUserRoleRequest) (*GetUserRoleResponse, error)
	//
	//Add users into app. When add users, admin can choose to authorise policies to user and authorise roles to user.
	//Need APIs: https://pyramids.npool.top/set-user-role, https://pyramids.npool.top/user/policies.
	CreateUsers(context.Context, *CreateUsersRequest) (*NoDataResponse, error)
	//
	//Create group in an application. When create a group, admin can add users into this group at the same time.
	CreateGroup(context.Context, *CreateGroupRequest) (*NoDataResponse, error)
	//
	//Add users into group.
	AddGroupUsers(context.Context, *AddGroupUsersRequest) (*NoDataResponse, error)
	//
	//Remove users from group.
	DeleteGroupUsers(context.Context, *DeleteGroupUsersRequest) (*NoDataResponse, error)
	//
	//Update group info.
	UpdateGroup(context.Context, *UpdateGroupRequest) (*NoDataResponse, error)
	//
	//Delete group from app. When Delete group, we also need to remove users out from group.
	//Need api: https://user.npool.top/v1/remove/group/users.
	DeleteGroup(context.Context, *DeleteGroupRequest) (*NoDataResponse, error)
	//
	//Get groups from app.
	GetGroups(context.Context, *GetGroupsRequest) (*GetGroupsResponse, error)
	//
	//Create resource for app.
	CreateResource(context.Context, *CreateResourceRequest) (*NoDataResponse, error)
	//
	//Update resource of app.
	UpdateResource(context.Context, *UpdateResourceRequest) (*NoDataResponse, error)
	//
	//Get all resources from app.
	GetResources(context.Context, *GetResourcesRequest) (*GetResourcesResponse, error)
	//
	//Delete resource from app.
	DeleteResource(context.Context, *DeleteResourceRequest) (*NoDataResponse, error)
	mustEmbedUnimplementedApplicationManagementServer()
}

// UnimplementedApplicationManagementServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationManagementServer struct {
}

func (UnimplementedApplicationManagementServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedApplicationManagementServer) CreateApplication(context.Context, *CreateApplicationRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplication not implemented")
}
func (UnimplementedApplicationManagementServer) UpdateApplication(context.Context, *UpdateApplicationRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplication not implemented")
}
func (UnimplementedApplicationManagementServer) DeleteApplication(context.Context, *DeleteApplicationRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplication not implemented")
}
func (UnimplementedApplicationManagementServer) CreateRole(context.Context, *CreateRoleRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedApplicationManagementServer) UpdateRolePolicies(context.Context, *UpdateRolePoliciesRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRolePolicies not implemented")
}
func (UnimplementedApplicationManagementServer) UpdateRole(context.Context, *UpdateRoleRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedApplicationManagementServer) DeleteRole(context.Context, *DeleteRoleRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedApplicationManagementServer) SetUserRole(context.Context, *SetUserRoleRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserRole not implemented")
}
func (UnimplementedApplicationManagementServer) UnSetUserRole(context.Context, *UnSetUserRoleRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSetUserRole not implemented")
}
func (UnimplementedApplicationManagementServer) GetRoles(context.Context, *GetRolesRequest) (*GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedApplicationManagementServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedApplicationManagementServer) GetUserRole(context.Context, *GetUserRoleRequest) (*GetUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRole not implemented")
}
func (UnimplementedApplicationManagementServer) CreateUsers(context.Context, *CreateUsersRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsers not implemented")
}
func (UnimplementedApplicationManagementServer) CreateGroup(context.Context, *CreateGroupRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedApplicationManagementServer) AddGroupUsers(context.Context, *AddGroupUsersRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupUsers not implemented")
}
func (UnimplementedApplicationManagementServer) DeleteGroupUsers(context.Context, *DeleteGroupUsersRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupUsers not implemented")
}
func (UnimplementedApplicationManagementServer) UpdateGroup(context.Context, *UpdateGroupRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedApplicationManagementServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedApplicationManagementServer) GetGroups(context.Context, *GetGroupsRequest) (*GetGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedApplicationManagementServer) CreateResource(context.Context, *CreateResourceRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedApplicationManagementServer) UpdateResource(context.Context, *UpdateResourceRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedApplicationManagementServer) GetResources(context.Context, *GetResourcesRequest) (*GetResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResources not implemented")
}
func (UnimplementedApplicationManagementServer) DeleteResource(context.Context, *DeleteResourceRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedApplicationManagementServer) mustEmbedUnimplementedApplicationManagementServer() {}

// UnsafeApplicationManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationManagementServer will
// result in compilation errors.
type UnsafeApplicationManagementServer interface {
	mustEmbedUnimplementedApplicationManagementServer()
}

func RegisterApplicationManagementServer(s grpc.ServiceRegistrar, srv ApplicationManagementServer) {
	s.RegisterService(&ApplicationManagement_ServiceDesc, srv)
}

func _ApplicationManagement_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/CreateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).CreateApplication(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/UpdateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).UpdateApplication(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/DeleteApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).DeleteApplication(ctx, req.(*DeleteApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_UpdateRolePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRolePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).UpdateRolePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/UpdateRolePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).UpdateRolePolicies(ctx, req.(*UpdateRolePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_SetUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).SetUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/SetUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).SetUserRole(ctx, req.(*SetUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_UnSetUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSetUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).UnSetUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/UnSetUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).UnSetUserRole(ctx, req.(*UnSetUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetRoles(ctx, req.(*GetRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetUserRole(ctx, req.(*GetUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_CreateUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).CreateUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/CreateUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).CreateUsers(ctx, req.(*CreateUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_AddGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).AddGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/AddGroupUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).AddGroupUsers(ctx, req.(*AddGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_DeleteGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).DeleteGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/DeleteGroupUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).DeleteGroupUsers(ctx, req.(*DeleteGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetGroups(ctx, req.(*GetGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/CreateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).CreateResource(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/UpdateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/GetResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetResources(ctx, req.(*GetResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/application.management.v1.ApplicationManagement/DeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationManagement_ServiceDesc is the grpc.ServiceDesc for ApplicationManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "application.management.v1.ApplicationManagement",
	HandlerType: (*ApplicationManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _ApplicationManagement_Version_Handler,
		},
		{
			MethodName: "CreateApplication",
			Handler:    _ApplicationManagement_CreateApplication_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _ApplicationManagement_UpdateApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _ApplicationManagement_DeleteApplication_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _ApplicationManagement_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRolePolicies",
			Handler:    _ApplicationManagement_UpdateRolePolicies_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _ApplicationManagement_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _ApplicationManagement_DeleteRole_Handler,
		},
		{
			MethodName: "SetUserRole",
			Handler:    _ApplicationManagement_SetUserRole_Handler,
		},
		{
			MethodName: "UnSetUserRole",
			Handler:    _ApplicationManagement_UnSetUserRole_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _ApplicationManagement_GetRoles_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _ApplicationManagement_GetUsers_Handler,
		},
		{
			MethodName: "GetUserRole",
			Handler:    _ApplicationManagement_GetUserRole_Handler,
		},
		{
			MethodName: "CreateUsers",
			Handler:    _ApplicationManagement_CreateUsers_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _ApplicationManagement_CreateGroup_Handler,
		},
		{
			MethodName: "AddGroupUsers",
			Handler:    _ApplicationManagement_AddGroupUsers_Handler,
		},
		{
			MethodName: "DeleteGroupUsers",
			Handler:    _ApplicationManagement_DeleteGroupUsers_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _ApplicationManagement_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _ApplicationManagement_DeleteGroup_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _ApplicationManagement_GetGroups_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _ApplicationManagement_CreateResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _ApplicationManagement_UpdateResource_Handler,
		},
		{
			MethodName: "GetResources",
			Handler:    _ApplicationManagement_GetResources_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _ApplicationManagement_DeleteResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/application-management.proto",
}
