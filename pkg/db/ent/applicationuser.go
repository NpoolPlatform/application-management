// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/application-management/pkg/db/ent/applicationuser"
	"github.com/google/uuid"
)

// ApplicationUser is the model entity for the ApplicationUser schema.
type ApplicationUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Original holds the value of the "original" field.
	Original bool `json:"original,omitempty"`
	// KycVerify holds the value of the "kyc_verify" field.
	KycVerify bool `json:"kyc_verify,omitempty"`
	// GaVerify holds the value of the "ga_verify" field.
	GaVerify bool `json:"ga_verify,omitempty"`
	// GaLogin holds the value of the "ga_login" field.
	GaLogin bool `json:"ga_login,omitempty"`
	// SmsLogin holds the value of the "sms_login" field.
	SmsLogin bool `json:"sms_login,omitempty"`
	// LoginNumber holds the value of the "Login_number" field.
	LoginNumber uint32 `json:"Login_number,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApplicationUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case applicationuser.FieldOriginal, applicationuser.FieldKycVerify, applicationuser.FieldGaVerify, applicationuser.FieldGaLogin, applicationuser.FieldSmsLogin:
			values[i] = new(sql.NullBool)
		case applicationuser.FieldLoginNumber, applicationuser.FieldCreateAt, applicationuser.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case applicationuser.FieldID, applicationuser.FieldAppID, applicationuser.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ApplicationUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApplicationUser fields.
func (au *ApplicationUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case applicationuser.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				au.ID = *value
			}
		case applicationuser.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				au.AppID = *value
			}
		case applicationuser.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				au.UserID = *value
			}
		case applicationuser.FieldOriginal:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field original", values[i])
			} else if value.Valid {
				au.Original = value.Bool
			}
		case applicationuser.FieldKycVerify:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field kyc_verify", values[i])
			} else if value.Valid {
				au.KycVerify = value.Bool
			}
		case applicationuser.FieldGaVerify:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ga_verify", values[i])
			} else if value.Valid {
				au.GaVerify = value.Bool
			}
		case applicationuser.FieldGaLogin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ga_login", values[i])
			} else if value.Valid {
				au.GaLogin = value.Bool
			}
		case applicationuser.FieldSmsLogin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sms_login", values[i])
			} else if value.Valid {
				au.SmsLogin = value.Bool
			}
		case applicationuser.FieldLoginNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Login_number", values[i])
			} else if value.Valid {
				au.LoginNumber = uint32(value.Int64)
			}
		case applicationuser.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				au.CreateAt = uint32(value.Int64)
			}
		case applicationuser.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				au.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ApplicationUser.
// Note that you need to call ApplicationUser.Unwrap() before calling this method if this ApplicationUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (au *ApplicationUser) Update() *ApplicationUserUpdateOne {
	return (&ApplicationUserClient{config: au.config}).UpdateOne(au)
}

// Unwrap unwraps the ApplicationUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (au *ApplicationUser) Unwrap() *ApplicationUser {
	tx, ok := au.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApplicationUser is not a transactional entity")
	}
	au.config.driver = tx.drv
	return au
}

// String implements the fmt.Stringer.
func (au *ApplicationUser) String() string {
	var builder strings.Builder
	builder.WriteString("ApplicationUser(")
	builder.WriteString(fmt.Sprintf("id=%v", au.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", au.AppID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", au.UserID))
	builder.WriteString(", original=")
	builder.WriteString(fmt.Sprintf("%v", au.Original))
	builder.WriteString(", kyc_verify=")
	builder.WriteString(fmt.Sprintf("%v", au.KycVerify))
	builder.WriteString(", ga_verify=")
	builder.WriteString(fmt.Sprintf("%v", au.GaVerify))
	builder.WriteString(", ga_login=")
	builder.WriteString(fmt.Sprintf("%v", au.GaLogin))
	builder.WriteString(", sms_login=")
	builder.WriteString(fmt.Sprintf("%v", au.SmsLogin))
	builder.WriteString(", Login_number=")
	builder.WriteString(fmt.Sprintf("%v", au.LoginNumber))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", au.CreateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", au.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// ApplicationUsers is a parsable slice of ApplicationUser.
type ApplicationUsers []*ApplicationUser

func (au ApplicationUsers) config(cfg config) {
	for _i := range au {
		au[_i].config = cfg
	}
}
