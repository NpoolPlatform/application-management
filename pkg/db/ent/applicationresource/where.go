// Code generated by entc, DO NOT EDIT.

package applicationresource

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/application-management/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// ResourceName applies equality check predicate on the "resource_name" field. It's identical to ResourceNameEQ.
func ResourceName(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResourceName), v))
	})
}

// ResourceDescription applies equality check predicate on the "resource_description" field. It's identical to ResourceDescriptionEQ.
func ResourceDescription(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResourceDescription), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// Creator applies equality check predicate on the "creator" field. It's identical to CreatorEQ.
func Creator(v uuid.UUID) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreator), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...string) predicate.ApplicationResource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationResource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...string) predicate.ApplicationResource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationResource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDContains applies the Contains predicate on the "app_id" field.
func AppIDContains(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAppID), v))
	})
}

// AppIDHasPrefix applies the HasPrefix predicate on the "app_id" field.
func AppIDHasPrefix(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAppID), v))
	})
}

// AppIDHasSuffix applies the HasSuffix predicate on the "app_id" field.
func AppIDHasSuffix(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAppID), v))
	})
}

// AppIDEqualFold applies the EqualFold predicate on the "app_id" field.
func AppIDEqualFold(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAppID), v))
	})
}

// AppIDContainsFold applies the ContainsFold predicate on the "app_id" field.
func AppIDContainsFold(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAppID), v))
	})
}

// ResourceNameEQ applies the EQ predicate on the "resource_name" field.
func ResourceNameEQ(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResourceName), v))
	})
}

// ResourceNameNEQ applies the NEQ predicate on the "resource_name" field.
func ResourceNameNEQ(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResourceName), v))
	})
}

// ResourceNameIn applies the In predicate on the "resource_name" field.
func ResourceNameIn(vs ...string) predicate.ApplicationResource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationResource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResourceName), v...))
	})
}

// ResourceNameNotIn applies the NotIn predicate on the "resource_name" field.
func ResourceNameNotIn(vs ...string) predicate.ApplicationResource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationResource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResourceName), v...))
	})
}

// ResourceNameGT applies the GT predicate on the "resource_name" field.
func ResourceNameGT(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResourceName), v))
	})
}

// ResourceNameGTE applies the GTE predicate on the "resource_name" field.
func ResourceNameGTE(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResourceName), v))
	})
}

// ResourceNameLT applies the LT predicate on the "resource_name" field.
func ResourceNameLT(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResourceName), v))
	})
}

// ResourceNameLTE applies the LTE predicate on the "resource_name" field.
func ResourceNameLTE(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResourceName), v))
	})
}

// ResourceNameContains applies the Contains predicate on the "resource_name" field.
func ResourceNameContains(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResourceName), v))
	})
}

// ResourceNameHasPrefix applies the HasPrefix predicate on the "resource_name" field.
func ResourceNameHasPrefix(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResourceName), v))
	})
}

// ResourceNameHasSuffix applies the HasSuffix predicate on the "resource_name" field.
func ResourceNameHasSuffix(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResourceName), v))
	})
}

// ResourceNameEqualFold applies the EqualFold predicate on the "resource_name" field.
func ResourceNameEqualFold(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResourceName), v))
	})
}

// ResourceNameContainsFold applies the ContainsFold predicate on the "resource_name" field.
func ResourceNameContainsFold(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResourceName), v))
	})
}

// ResourceDescriptionEQ applies the EQ predicate on the "resource_description" field.
func ResourceDescriptionEQ(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResourceDescription), v))
	})
}

// ResourceDescriptionNEQ applies the NEQ predicate on the "resource_description" field.
func ResourceDescriptionNEQ(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResourceDescription), v))
	})
}

// ResourceDescriptionIn applies the In predicate on the "resource_description" field.
func ResourceDescriptionIn(vs ...string) predicate.ApplicationResource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationResource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResourceDescription), v...))
	})
}

// ResourceDescriptionNotIn applies the NotIn predicate on the "resource_description" field.
func ResourceDescriptionNotIn(vs ...string) predicate.ApplicationResource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationResource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResourceDescription), v...))
	})
}

// ResourceDescriptionGT applies the GT predicate on the "resource_description" field.
func ResourceDescriptionGT(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResourceDescription), v))
	})
}

// ResourceDescriptionGTE applies the GTE predicate on the "resource_description" field.
func ResourceDescriptionGTE(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResourceDescription), v))
	})
}

// ResourceDescriptionLT applies the LT predicate on the "resource_description" field.
func ResourceDescriptionLT(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResourceDescription), v))
	})
}

// ResourceDescriptionLTE applies the LTE predicate on the "resource_description" field.
func ResourceDescriptionLTE(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResourceDescription), v))
	})
}

// ResourceDescriptionContains applies the Contains predicate on the "resource_description" field.
func ResourceDescriptionContains(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResourceDescription), v))
	})
}

// ResourceDescriptionHasPrefix applies the HasPrefix predicate on the "resource_description" field.
func ResourceDescriptionHasPrefix(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResourceDescription), v))
	})
}

// ResourceDescriptionHasSuffix applies the HasSuffix predicate on the "resource_description" field.
func ResourceDescriptionHasSuffix(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResourceDescription), v))
	})
}

// ResourceDescriptionIsNil applies the IsNil predicate on the "resource_description" field.
func ResourceDescriptionIsNil() predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResourceDescription)))
	})
}

// ResourceDescriptionNotNil applies the NotNil predicate on the "resource_description" field.
func ResourceDescriptionNotNil() predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResourceDescription)))
	})
}

// ResourceDescriptionEqualFold applies the EqualFold predicate on the "resource_description" field.
func ResourceDescriptionEqualFold(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResourceDescription), v))
	})
}

// ResourceDescriptionContainsFold applies the ContainsFold predicate on the "resource_description" field.
func ResourceDescriptionContainsFold(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResourceDescription), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.ApplicationResource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationResource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.ApplicationResource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationResource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldType), v))
	})
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldType), v))
	})
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldType), v))
	})
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldType), v))
	})
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldType), v))
	})
}

// CreatorEQ applies the EQ predicate on the "creator" field.
func CreatorEQ(v uuid.UUID) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreator), v))
	})
}

// CreatorNEQ applies the NEQ predicate on the "creator" field.
func CreatorNEQ(v uuid.UUID) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreator), v))
	})
}

// CreatorIn applies the In predicate on the "creator" field.
func CreatorIn(vs ...uuid.UUID) predicate.ApplicationResource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationResource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreator), v...))
	})
}

// CreatorNotIn applies the NotIn predicate on the "creator" field.
func CreatorNotIn(vs ...uuid.UUID) predicate.ApplicationResource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationResource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreator), v...))
	})
}

// CreatorGT applies the GT predicate on the "creator" field.
func CreatorGT(v uuid.UUID) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreator), v))
	})
}

// CreatorGTE applies the GTE predicate on the "creator" field.
func CreatorGTE(v uuid.UUID) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreator), v))
	})
}

// CreatorLT applies the LT predicate on the "creator" field.
func CreatorLT(v uuid.UUID) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreator), v))
	})
}

// CreatorLTE applies the LTE predicate on the "creator" field.
func CreatorLTE(v uuid.UUID) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreator), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...int64) predicate.ApplicationResource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationResource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...int64) predicate.ApplicationResource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationResource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...int64) predicate.ApplicationResource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationResource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...int64) predicate.ApplicationResource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationResource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...int64) predicate.ApplicationResource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationResource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...int64) predicate.ApplicationResource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApplicationResource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v int64) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ApplicationResource) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ApplicationResource) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ApplicationResource) predicate.ApplicationResource {
	return predicate.ApplicationResource(func(s *sql.Selector) {
		p(s.Not())
	})
}
