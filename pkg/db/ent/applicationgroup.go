// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/application-management/pkg/db/ent/applicationgroup"
	"github.com/google/uuid"
)

// ApplicationGroup is the model entity for the ApplicationGroup schema.
type ApplicationGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// GroupName holds the value of the "group_name" field.
	GroupName string `json:"group_name,omitempty"`
	// GroupLogo holds the value of the "group_logo" field.
	GroupLogo string `json:"group_logo,omitempty"`
	// GroupOwner holds the value of the "group_owner" field.
	GroupOwner uuid.UUID `json:"group_owner,omitempty"`
	// Annotation holds the value of the "annotation" field.
	Annotation string `json:"annotation,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt int64 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt int64 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt int64 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApplicationGroup) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case applicationgroup.FieldCreateAt, applicationgroup.FieldUpdateAt, applicationgroup.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case applicationgroup.FieldAppID, applicationgroup.FieldGroupName, applicationgroup.FieldGroupLogo, applicationgroup.FieldAnnotation:
			values[i] = new(sql.NullString)
		case applicationgroup.FieldID, applicationgroup.FieldGroupOwner:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ApplicationGroup", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApplicationGroup fields.
func (ag *ApplicationGroup) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case applicationgroup.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ag.ID = *value
			}
		case applicationgroup.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				ag.AppID = value.String
			}
		case applicationgroup.FieldGroupName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group_name", values[i])
			} else if value.Valid {
				ag.GroupName = value.String
			}
		case applicationgroup.FieldGroupLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group_logo", values[i])
			} else if value.Valid {
				ag.GroupLogo = value.String
			}
		case applicationgroup.FieldGroupOwner:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field group_owner", values[i])
			} else if value != nil {
				ag.GroupOwner = *value
			}
		case applicationgroup.FieldAnnotation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field annotation", values[i])
			} else if value.Valid {
				ag.Annotation = value.String
			}
		case applicationgroup.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ag.CreateAt = value.Int64
			}
		case applicationgroup.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ag.UpdateAt = value.Int64
			}
		case applicationgroup.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				ag.DeleteAt = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ApplicationGroup.
// Note that you need to call ApplicationGroup.Unwrap() before calling this method if this ApplicationGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (ag *ApplicationGroup) Update() *ApplicationGroupUpdateOne {
	return (&ApplicationGroupClient{config: ag.config}).UpdateOne(ag)
}

// Unwrap unwraps the ApplicationGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ag *ApplicationGroup) Unwrap() *ApplicationGroup {
	tx, ok := ag.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApplicationGroup is not a transactional entity")
	}
	ag.config.driver = tx.drv
	return ag
}

// String implements the fmt.Stringer.
func (ag *ApplicationGroup) String() string {
	var builder strings.Builder
	builder.WriteString("ApplicationGroup(")
	builder.WriteString(fmt.Sprintf("id=%v", ag.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(ag.AppID)
	builder.WriteString(", group_name=")
	builder.WriteString(ag.GroupName)
	builder.WriteString(", group_logo=")
	builder.WriteString(ag.GroupLogo)
	builder.WriteString(", group_owner=")
	builder.WriteString(fmt.Sprintf("%v", ag.GroupOwner))
	builder.WriteString(", annotation=")
	builder.WriteString(ag.Annotation)
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", ag.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", ag.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", ag.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// ApplicationGroups is a parsable slice of ApplicationGroup.
type ApplicationGroups []*ApplicationGroup

func (ag ApplicationGroups) config(cfg config) {
	for _i := range ag {
		ag[_i].config = cfg
	}
}
