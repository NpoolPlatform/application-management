// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/application-management/pkg/db/ent/application"
	"github.com/NpoolPlatform/application-management/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ApplicationUpdate is the builder for updating Application entities.
type ApplicationUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicationMutation
}

// Where appends a list predicates to the ApplicationUpdate builder.
func (au *ApplicationUpdate) Where(ps ...predicate.Application) *ApplicationUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetApplicationName sets the "application_name" field.
func (au *ApplicationUpdate) SetApplicationName(s string) *ApplicationUpdate {
	au.mutation.SetApplicationName(s)
	return au
}

// SetApplicationOwner sets the "application_owner" field.
func (au *ApplicationUpdate) SetApplicationOwner(u uuid.UUID) *ApplicationUpdate {
	au.mutation.SetApplicationOwner(u)
	return au
}

// SetHomepageURL sets the "homepage_url" field.
func (au *ApplicationUpdate) SetHomepageURL(s string) *ApplicationUpdate {
	au.mutation.SetHomepageURL(s)
	return au
}

// SetNillableHomepageURL sets the "homepage_url" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableHomepageURL(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetHomepageURL(*s)
	}
	return au
}

// ClearHomepageURL clears the value of the "homepage_url" field.
func (au *ApplicationUpdate) ClearHomepageURL() *ApplicationUpdate {
	au.mutation.ClearHomepageURL()
	return au
}

// SetRedirectURL sets the "redirect_url" field.
func (au *ApplicationUpdate) SetRedirectURL(s string) *ApplicationUpdate {
	au.mutation.SetRedirectURL(s)
	return au
}

// SetNillableRedirectURL sets the "redirect_url" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableRedirectURL(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetRedirectURL(*s)
	}
	return au
}

// ClearRedirectURL clears the value of the "redirect_url" field.
func (au *ApplicationUpdate) ClearRedirectURL() *ApplicationUpdate {
	au.mutation.ClearRedirectURL()
	return au
}

// SetClientSecret sets the "client_secret" field.
func (au *ApplicationUpdate) SetClientSecret(s string) *ApplicationUpdate {
	au.mutation.SetClientSecret(s)
	return au
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableClientSecret(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetClientSecret(*s)
	}
	return au
}

// SetApplicationLogo sets the "application_logo" field.
func (au *ApplicationUpdate) SetApplicationLogo(s string) *ApplicationUpdate {
	au.mutation.SetApplicationLogo(s)
	return au
}

// SetNillableApplicationLogo sets the "application_logo" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableApplicationLogo(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetApplicationLogo(*s)
	}
	return au
}

// ClearApplicationLogo clears the value of the "application_logo" field.
func (au *ApplicationUpdate) ClearApplicationLogo() *ApplicationUpdate {
	au.mutation.ClearApplicationLogo()
	return au
}

// SetCreateAt sets the "create_at" field.
func (au *ApplicationUpdate) SetCreateAt(u uint32) *ApplicationUpdate {
	au.mutation.ResetCreateAt()
	au.mutation.SetCreateAt(u)
	return au
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableCreateAt(u *uint32) *ApplicationUpdate {
	if u != nil {
		au.SetCreateAt(*u)
	}
	return au
}

// AddCreateAt adds u to the "create_at" field.
func (au *ApplicationUpdate) AddCreateAt(u uint32) *ApplicationUpdate {
	au.mutation.AddCreateAt(u)
	return au
}

// SetUpdateAt sets the "update_at" field.
func (au *ApplicationUpdate) SetUpdateAt(u uint32) *ApplicationUpdate {
	au.mutation.ResetUpdateAt()
	au.mutation.SetUpdateAt(u)
	return au
}

// AddUpdateAt adds u to the "update_at" field.
func (au *ApplicationUpdate) AddUpdateAt(u uint32) *ApplicationUpdate {
	au.mutation.AddUpdateAt(u)
	return au
}

// SetDeleteAt sets the "delete_at" field.
func (au *ApplicationUpdate) SetDeleteAt(u uint32) *ApplicationUpdate {
	au.mutation.ResetDeleteAt()
	au.mutation.SetDeleteAt(u)
	return au
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableDeleteAt(u *uint32) *ApplicationUpdate {
	if u != nil {
		au.SetDeleteAt(*u)
	}
	return au
}

// AddDeleteAt adds u to the "delete_at" field.
func (au *ApplicationUpdate) AddDeleteAt(u uint32) *ApplicationUpdate {
	au.mutation.AddDeleteAt(u)
	return au
}

// Mutation returns the ApplicationMutation object of the builder.
func (au *ApplicationUpdate) Mutation() *ApplicationMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ApplicationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApplicationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *ApplicationUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ApplicationUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ApplicationUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *ApplicationUpdate) defaults() {
	if _, ok := au.mutation.UpdateAt(); !ok {
		v := application.UpdateDefaultUpdateAt()
		au.mutation.SetUpdateAt(v)
	}
}

func (au *ApplicationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   application.Table,
			Columns: application.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: application.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.ApplicationName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldApplicationName,
		})
	}
	if value, ok := au.mutation.ApplicationOwner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: application.FieldApplicationOwner,
		})
	}
	if value, ok := au.mutation.HomepageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldHomepageURL,
		})
	}
	if au.mutation.HomepageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: application.FieldHomepageURL,
		})
	}
	if value, ok := au.mutation.RedirectURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldRedirectURL,
		})
	}
	if au.mutation.RedirectURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: application.FieldRedirectURL,
		})
	}
	if value, ok := au.mutation.ClientSecret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldClientSecret,
		})
	}
	if value, ok := au.mutation.ApplicationLogo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldApplicationLogo,
		})
	}
	if au.mutation.ApplicationLogoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: application.FieldApplicationLogo,
		})
	}
	if value, ok := au.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: application.FieldCreateAt,
		})
	}
	if value, ok := au.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: application.FieldCreateAt,
		})
	}
	if value, ok := au.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: application.FieldUpdateAt,
		})
	}
	if value, ok := au.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: application.FieldUpdateAt,
		})
	}
	if value, ok := au.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: application.FieldDeleteAt,
		})
	}
	if value, ok := au.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: application.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{application.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ApplicationUpdateOne is the builder for updating a single Application entity.
type ApplicationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplicationMutation
}

// SetApplicationName sets the "application_name" field.
func (auo *ApplicationUpdateOne) SetApplicationName(s string) *ApplicationUpdateOne {
	auo.mutation.SetApplicationName(s)
	return auo
}

// SetApplicationOwner sets the "application_owner" field.
func (auo *ApplicationUpdateOne) SetApplicationOwner(u uuid.UUID) *ApplicationUpdateOne {
	auo.mutation.SetApplicationOwner(u)
	return auo
}

// SetHomepageURL sets the "homepage_url" field.
func (auo *ApplicationUpdateOne) SetHomepageURL(s string) *ApplicationUpdateOne {
	auo.mutation.SetHomepageURL(s)
	return auo
}

// SetNillableHomepageURL sets the "homepage_url" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableHomepageURL(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetHomepageURL(*s)
	}
	return auo
}

// ClearHomepageURL clears the value of the "homepage_url" field.
func (auo *ApplicationUpdateOne) ClearHomepageURL() *ApplicationUpdateOne {
	auo.mutation.ClearHomepageURL()
	return auo
}

// SetRedirectURL sets the "redirect_url" field.
func (auo *ApplicationUpdateOne) SetRedirectURL(s string) *ApplicationUpdateOne {
	auo.mutation.SetRedirectURL(s)
	return auo
}

// SetNillableRedirectURL sets the "redirect_url" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableRedirectURL(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetRedirectURL(*s)
	}
	return auo
}

// ClearRedirectURL clears the value of the "redirect_url" field.
func (auo *ApplicationUpdateOne) ClearRedirectURL() *ApplicationUpdateOne {
	auo.mutation.ClearRedirectURL()
	return auo
}

// SetClientSecret sets the "client_secret" field.
func (auo *ApplicationUpdateOne) SetClientSecret(s string) *ApplicationUpdateOne {
	auo.mutation.SetClientSecret(s)
	return auo
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableClientSecret(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetClientSecret(*s)
	}
	return auo
}

// SetApplicationLogo sets the "application_logo" field.
func (auo *ApplicationUpdateOne) SetApplicationLogo(s string) *ApplicationUpdateOne {
	auo.mutation.SetApplicationLogo(s)
	return auo
}

// SetNillableApplicationLogo sets the "application_logo" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableApplicationLogo(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetApplicationLogo(*s)
	}
	return auo
}

// ClearApplicationLogo clears the value of the "application_logo" field.
func (auo *ApplicationUpdateOne) ClearApplicationLogo() *ApplicationUpdateOne {
	auo.mutation.ClearApplicationLogo()
	return auo
}

// SetCreateAt sets the "create_at" field.
func (auo *ApplicationUpdateOne) SetCreateAt(u uint32) *ApplicationUpdateOne {
	auo.mutation.ResetCreateAt()
	auo.mutation.SetCreateAt(u)
	return auo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableCreateAt(u *uint32) *ApplicationUpdateOne {
	if u != nil {
		auo.SetCreateAt(*u)
	}
	return auo
}

// AddCreateAt adds u to the "create_at" field.
func (auo *ApplicationUpdateOne) AddCreateAt(u uint32) *ApplicationUpdateOne {
	auo.mutation.AddCreateAt(u)
	return auo
}

// SetUpdateAt sets the "update_at" field.
func (auo *ApplicationUpdateOne) SetUpdateAt(u uint32) *ApplicationUpdateOne {
	auo.mutation.ResetUpdateAt()
	auo.mutation.SetUpdateAt(u)
	return auo
}

// AddUpdateAt adds u to the "update_at" field.
func (auo *ApplicationUpdateOne) AddUpdateAt(u uint32) *ApplicationUpdateOne {
	auo.mutation.AddUpdateAt(u)
	return auo
}

// SetDeleteAt sets the "delete_at" field.
func (auo *ApplicationUpdateOne) SetDeleteAt(u uint32) *ApplicationUpdateOne {
	auo.mutation.ResetDeleteAt()
	auo.mutation.SetDeleteAt(u)
	return auo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableDeleteAt(u *uint32) *ApplicationUpdateOne {
	if u != nil {
		auo.SetDeleteAt(*u)
	}
	return auo
}

// AddDeleteAt adds u to the "delete_at" field.
func (auo *ApplicationUpdateOne) AddDeleteAt(u uint32) *ApplicationUpdateOne {
	auo.mutation.AddDeleteAt(u)
	return auo
}

// Mutation returns the ApplicationMutation object of the builder.
func (auo *ApplicationUpdateOne) Mutation() *ApplicationMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ApplicationUpdateOne) Select(field string, fields ...string) *ApplicationUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Application entity.
func (auo *ApplicationUpdateOne) Save(ctx context.Context) (*Application, error) {
	var (
		err  error
		node *Application
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApplicationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ApplicationUpdateOne) SaveX(ctx context.Context) *Application {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ApplicationUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ApplicationUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *ApplicationUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdateAt(); !ok {
		v := application.UpdateDefaultUpdateAt()
		auo.mutation.SetUpdateAt(v)
	}
}

func (auo *ApplicationUpdateOne) sqlSave(ctx context.Context) (_node *Application, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   application.Table,
			Columns: application.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: application.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Application.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, application.FieldID)
		for _, f := range fields {
			if !application.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != application.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.ApplicationName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldApplicationName,
		})
	}
	if value, ok := auo.mutation.ApplicationOwner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: application.FieldApplicationOwner,
		})
	}
	if value, ok := auo.mutation.HomepageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldHomepageURL,
		})
	}
	if auo.mutation.HomepageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: application.FieldHomepageURL,
		})
	}
	if value, ok := auo.mutation.RedirectURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldRedirectURL,
		})
	}
	if auo.mutation.RedirectURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: application.FieldRedirectURL,
		})
	}
	if value, ok := auo.mutation.ClientSecret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldClientSecret,
		})
	}
	if value, ok := auo.mutation.ApplicationLogo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: application.FieldApplicationLogo,
		})
	}
	if auo.mutation.ApplicationLogoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: application.FieldApplicationLogo,
		})
	}
	if value, ok := auo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: application.FieldCreateAt,
		})
	}
	if value, ok := auo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: application.FieldCreateAt,
		})
	}
	if value, ok := auo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: application.FieldUpdateAt,
		})
	}
	if value, ok := auo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: application.FieldUpdateAt,
		})
	}
	if value, ok := auo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: application.FieldDeleteAt,
		})
	}
	if value, ok := auo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: application.FieldDeleteAt,
		})
	}
	_node = &Application{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{application.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
