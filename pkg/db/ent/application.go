// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/application-management/pkg/db/ent/application"
	"github.com/google/uuid"
)

// Application is the model entity for the Application schema.
type Application struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ApplicationName holds the value of the "application_name" field.
	ApplicationName string `json:"application_name,omitempty"`
	// ApplicationOwner holds the value of the "application_owner" field.
	ApplicationOwner uuid.UUID `json:"application_owner,omitempty"`
	// HomepageURL holds the value of the "homepage_url" field.
	HomepageURL string `json:"homepage_url,omitempty"`
	// RedirectURL holds the value of the "redirect_url" field.
	RedirectURL string `json:"redirect_url,omitempty"`
	// ClientSecret holds the value of the "client_secret" field.
	ClientSecret string `json:"-"`
	// ApplicationLogo holds the value of the "application_logo" field.
	ApplicationLogo string `json:"application_logo,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Application) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case application.FieldCreateAt, application.FieldUpdateAt, application.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case application.FieldID, application.FieldApplicationName, application.FieldHomepageURL, application.FieldRedirectURL, application.FieldClientSecret, application.FieldApplicationLogo:
			values[i] = new(sql.NullString)
		case application.FieldApplicationOwner:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Application", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Application fields.
func (a *Application) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case application.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case application.FieldApplicationName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field application_name", values[i])
			} else if value.Valid {
				a.ApplicationName = value.String
			}
		case application.FieldApplicationOwner:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field application_owner", values[i])
			} else if value != nil {
				a.ApplicationOwner = *value
			}
		case application.FieldHomepageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field homepage_url", values[i])
			} else if value.Valid {
				a.HomepageURL = value.String
			}
		case application.FieldRedirectURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_url", values[i])
			} else if value.Valid {
				a.RedirectURL = value.String
			}
		case application.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value.Valid {
				a.ClientSecret = value.String
			}
		case application.FieldApplicationLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field application_logo", values[i])
			} else if value.Valid {
				a.ApplicationLogo = value.String
			}
		case application.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				a.CreateAt = uint32(value.Int64)
			}
		case application.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				a.UpdateAt = uint32(value.Int64)
			}
		case application.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				a.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Application.
// Note that you need to call Application.Unwrap() before calling this method if this Application
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Application) Update() *ApplicationUpdateOne {
	return (&ApplicationClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Application entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Application) Unwrap() *Application {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Application is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Application) String() string {
	var builder strings.Builder
	builder.WriteString("Application(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", application_name=")
	builder.WriteString(a.ApplicationName)
	builder.WriteString(", application_owner=")
	builder.WriteString(fmt.Sprintf("%v", a.ApplicationOwner))
	builder.WriteString(", homepage_url=")
	builder.WriteString(a.HomepageURL)
	builder.WriteString(", redirect_url=")
	builder.WriteString(a.RedirectURL)
	builder.WriteString(", client_secret=<sensitive>")
	builder.WriteString(", application_logo=")
	builder.WriteString(a.ApplicationLogo)
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", a.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", a.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", a.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// Applications is a parsable slice of Application.
type Applications []*Application

func (a Applications) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
