// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/application-management/pkg/db/ent/applicationrole"
	"github.com/google/uuid"
)

// ApplicationRole is the model entity for the ApplicationRole schema.
type ApplicationRole struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// RoleName holds the value of the "role_name" field.
	RoleName string `json:"role_name,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator uuid.UUID `json:"creator,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt int64 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt int64 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt int64 `json:"delete_at,omitempty"`
	// Annotation holds the value of the "annotation" field.
	Annotation string `json:"annotation,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApplicationRole) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case applicationrole.FieldCreateAt, applicationrole.FieldUpdateAt, applicationrole.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case applicationrole.FieldAppID, applicationrole.FieldRoleName, applicationrole.FieldAnnotation:
			values[i] = new(sql.NullString)
		case applicationrole.FieldID, applicationrole.FieldCreator:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ApplicationRole", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApplicationRole fields.
func (ar *ApplicationRole) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case applicationrole.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ar.ID = *value
			}
		case applicationrole.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				ar.AppID = value.String
			}
		case applicationrole.FieldRoleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_name", values[i])
			} else if value.Valid {
				ar.RoleName = value.String
			}
		case applicationrole.FieldCreator:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil {
				ar.Creator = *value
			}
		case applicationrole.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				ar.CreateAt = value.Int64
			}
		case applicationrole.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				ar.UpdateAt = value.Int64
			}
		case applicationrole.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				ar.DeleteAt = value.Int64
			}
		case applicationrole.FieldAnnotation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field annotation", values[i])
			} else if value.Valid {
				ar.Annotation = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ApplicationRole.
// Note that you need to call ApplicationRole.Unwrap() before calling this method if this ApplicationRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *ApplicationRole) Update() *ApplicationRoleUpdateOne {
	return (&ApplicationRoleClient{config: ar.config}).UpdateOne(ar)
}

// Unwrap unwraps the ApplicationRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *ApplicationRole) Unwrap() *ApplicationRole {
	tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApplicationRole is not a transactional entity")
	}
	ar.config.driver = tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *ApplicationRole) String() string {
	var builder strings.Builder
	builder.WriteString("ApplicationRole(")
	builder.WriteString(fmt.Sprintf("id=%v", ar.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(ar.AppID)
	builder.WriteString(", role_name=")
	builder.WriteString(ar.RoleName)
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", ar.Creator))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", ar.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", ar.UpdateAt))
	builder.WriteString(", delete_at=")
	builder.WriteString(fmt.Sprintf("%v", ar.DeleteAt))
	builder.WriteString(", annotation=")
	builder.WriteString(ar.Annotation)
	builder.WriteByte(')')
	return builder.String()
}

// ApplicationRoles is a parsable slice of ApplicationRole.
type ApplicationRoles []*ApplicationRole

func (ar ApplicationRoles) config(cfg config) {
	for _i := range ar {
		ar[_i].config = cfg
	}
}
