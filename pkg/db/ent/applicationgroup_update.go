// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/application-management/pkg/db/ent/applicationgroup"
	"github.com/NpoolPlatform/application-management/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ApplicationGroupUpdate is the builder for updating ApplicationGroup entities.
type ApplicationGroupUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicationGroupMutation
}

// Where appends a list predicates to the ApplicationGroupUpdate builder.
func (agu *ApplicationGroupUpdate) Where(ps ...predicate.ApplicationGroup) *ApplicationGroupUpdate {
	agu.mutation.Where(ps...)
	return agu
}

// SetAppID sets the "app_id" field.
func (agu *ApplicationGroupUpdate) SetAppID(s string) *ApplicationGroupUpdate {
	agu.mutation.SetAppID(s)
	return agu
}

// SetGroupName sets the "group_name" field.
func (agu *ApplicationGroupUpdate) SetGroupName(s string) *ApplicationGroupUpdate {
	agu.mutation.SetGroupName(s)
	return agu
}

// SetGroupLogo sets the "group_logo" field.
func (agu *ApplicationGroupUpdate) SetGroupLogo(s string) *ApplicationGroupUpdate {
	agu.mutation.SetGroupLogo(s)
	return agu
}

// SetNillableGroupLogo sets the "group_logo" field if the given value is not nil.
func (agu *ApplicationGroupUpdate) SetNillableGroupLogo(s *string) *ApplicationGroupUpdate {
	if s != nil {
		agu.SetGroupLogo(*s)
	}
	return agu
}

// ClearGroupLogo clears the value of the "group_logo" field.
func (agu *ApplicationGroupUpdate) ClearGroupLogo() *ApplicationGroupUpdate {
	agu.mutation.ClearGroupLogo()
	return agu
}

// SetGroupOwner sets the "group_owner" field.
func (agu *ApplicationGroupUpdate) SetGroupOwner(u uuid.UUID) *ApplicationGroupUpdate {
	agu.mutation.SetGroupOwner(u)
	return agu
}

// SetAnnotation sets the "annotation" field.
func (agu *ApplicationGroupUpdate) SetAnnotation(s string) *ApplicationGroupUpdate {
	agu.mutation.SetAnnotation(s)
	return agu
}

// SetNillableAnnotation sets the "annotation" field if the given value is not nil.
func (agu *ApplicationGroupUpdate) SetNillableAnnotation(s *string) *ApplicationGroupUpdate {
	if s != nil {
		agu.SetAnnotation(*s)
	}
	return agu
}

// ClearAnnotation clears the value of the "annotation" field.
func (agu *ApplicationGroupUpdate) ClearAnnotation() *ApplicationGroupUpdate {
	agu.mutation.ClearAnnotation()
	return agu
}

// SetCreateAt sets the "create_at" field.
func (agu *ApplicationGroupUpdate) SetCreateAt(u uint32) *ApplicationGroupUpdate {
	agu.mutation.ResetCreateAt()
	agu.mutation.SetCreateAt(u)
	return agu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (agu *ApplicationGroupUpdate) SetNillableCreateAt(u *uint32) *ApplicationGroupUpdate {
	if u != nil {
		agu.SetCreateAt(*u)
	}
	return agu
}

// AddCreateAt adds u to the "create_at" field.
func (agu *ApplicationGroupUpdate) AddCreateAt(u uint32) *ApplicationGroupUpdate {
	agu.mutation.AddCreateAt(u)
	return agu
}

// SetUpdateAt sets the "update_at" field.
func (agu *ApplicationGroupUpdate) SetUpdateAt(u uint32) *ApplicationGroupUpdate {
	agu.mutation.ResetUpdateAt()
	agu.mutation.SetUpdateAt(u)
	return agu
}

// AddUpdateAt adds u to the "update_at" field.
func (agu *ApplicationGroupUpdate) AddUpdateAt(u uint32) *ApplicationGroupUpdate {
	agu.mutation.AddUpdateAt(u)
	return agu
}

// SetDeleteAt sets the "delete_at" field.
func (agu *ApplicationGroupUpdate) SetDeleteAt(u uint32) *ApplicationGroupUpdate {
	agu.mutation.ResetDeleteAt()
	agu.mutation.SetDeleteAt(u)
	return agu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (agu *ApplicationGroupUpdate) SetNillableDeleteAt(u *uint32) *ApplicationGroupUpdate {
	if u != nil {
		agu.SetDeleteAt(*u)
	}
	return agu
}

// AddDeleteAt adds u to the "delete_at" field.
func (agu *ApplicationGroupUpdate) AddDeleteAt(u uint32) *ApplicationGroupUpdate {
	agu.mutation.AddDeleteAt(u)
	return agu
}

// Mutation returns the ApplicationGroupMutation object of the builder.
func (agu *ApplicationGroupUpdate) Mutation() *ApplicationGroupMutation {
	return agu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agu *ApplicationGroupUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	agu.defaults()
	if len(agu.hooks) == 0 {
		affected, err = agu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApplicationGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			agu.mutation = mutation
			affected, err = agu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(agu.hooks) - 1; i >= 0; i-- {
			if agu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = agu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, agu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (agu *ApplicationGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := agu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agu *ApplicationGroupUpdate) Exec(ctx context.Context) error {
	_, err := agu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agu *ApplicationGroupUpdate) ExecX(ctx context.Context) {
	if err := agu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agu *ApplicationGroupUpdate) defaults() {
	if _, ok := agu.mutation.UpdateAt(); !ok {
		v := applicationgroup.UpdateDefaultUpdateAt()
		agu.mutation.SetUpdateAt(v)
	}
}

func (agu *ApplicationGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   applicationgroup.Table,
			Columns: applicationgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: applicationgroup.FieldID,
			},
		},
	}
	if ps := agu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: applicationgroup.FieldAppID,
		})
	}
	if value, ok := agu.mutation.GroupName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: applicationgroup.FieldGroupName,
		})
	}
	if value, ok := agu.mutation.GroupLogo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: applicationgroup.FieldGroupLogo,
		})
	}
	if agu.mutation.GroupLogoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: applicationgroup.FieldGroupLogo,
		})
	}
	if value, ok := agu.mutation.GroupOwner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: applicationgroup.FieldGroupOwner,
		})
	}
	if value, ok := agu.mutation.Annotation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: applicationgroup.FieldAnnotation,
		})
	}
	if agu.mutation.AnnotationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: applicationgroup.FieldAnnotation,
		})
	}
	if value, ok := agu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: applicationgroup.FieldCreateAt,
		})
	}
	if value, ok := agu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: applicationgroup.FieldCreateAt,
		})
	}
	if value, ok := agu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: applicationgroup.FieldUpdateAt,
		})
	}
	if value, ok := agu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: applicationgroup.FieldUpdateAt,
		})
	}
	if value, ok := agu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: applicationgroup.FieldDeleteAt,
		})
	}
	if value, ok := agu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: applicationgroup.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, agu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicationgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ApplicationGroupUpdateOne is the builder for updating a single ApplicationGroup entity.
type ApplicationGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplicationGroupMutation
}

// SetAppID sets the "app_id" field.
func (aguo *ApplicationGroupUpdateOne) SetAppID(s string) *ApplicationGroupUpdateOne {
	aguo.mutation.SetAppID(s)
	return aguo
}

// SetGroupName sets the "group_name" field.
func (aguo *ApplicationGroupUpdateOne) SetGroupName(s string) *ApplicationGroupUpdateOne {
	aguo.mutation.SetGroupName(s)
	return aguo
}

// SetGroupLogo sets the "group_logo" field.
func (aguo *ApplicationGroupUpdateOne) SetGroupLogo(s string) *ApplicationGroupUpdateOne {
	aguo.mutation.SetGroupLogo(s)
	return aguo
}

// SetNillableGroupLogo sets the "group_logo" field if the given value is not nil.
func (aguo *ApplicationGroupUpdateOne) SetNillableGroupLogo(s *string) *ApplicationGroupUpdateOne {
	if s != nil {
		aguo.SetGroupLogo(*s)
	}
	return aguo
}

// ClearGroupLogo clears the value of the "group_logo" field.
func (aguo *ApplicationGroupUpdateOne) ClearGroupLogo() *ApplicationGroupUpdateOne {
	aguo.mutation.ClearGroupLogo()
	return aguo
}

// SetGroupOwner sets the "group_owner" field.
func (aguo *ApplicationGroupUpdateOne) SetGroupOwner(u uuid.UUID) *ApplicationGroupUpdateOne {
	aguo.mutation.SetGroupOwner(u)
	return aguo
}

// SetAnnotation sets the "annotation" field.
func (aguo *ApplicationGroupUpdateOne) SetAnnotation(s string) *ApplicationGroupUpdateOne {
	aguo.mutation.SetAnnotation(s)
	return aguo
}

// SetNillableAnnotation sets the "annotation" field if the given value is not nil.
func (aguo *ApplicationGroupUpdateOne) SetNillableAnnotation(s *string) *ApplicationGroupUpdateOne {
	if s != nil {
		aguo.SetAnnotation(*s)
	}
	return aguo
}

// ClearAnnotation clears the value of the "annotation" field.
func (aguo *ApplicationGroupUpdateOne) ClearAnnotation() *ApplicationGroupUpdateOne {
	aguo.mutation.ClearAnnotation()
	return aguo
}

// SetCreateAt sets the "create_at" field.
func (aguo *ApplicationGroupUpdateOne) SetCreateAt(u uint32) *ApplicationGroupUpdateOne {
	aguo.mutation.ResetCreateAt()
	aguo.mutation.SetCreateAt(u)
	return aguo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aguo *ApplicationGroupUpdateOne) SetNillableCreateAt(u *uint32) *ApplicationGroupUpdateOne {
	if u != nil {
		aguo.SetCreateAt(*u)
	}
	return aguo
}

// AddCreateAt adds u to the "create_at" field.
func (aguo *ApplicationGroupUpdateOne) AddCreateAt(u uint32) *ApplicationGroupUpdateOne {
	aguo.mutation.AddCreateAt(u)
	return aguo
}

// SetUpdateAt sets the "update_at" field.
func (aguo *ApplicationGroupUpdateOne) SetUpdateAt(u uint32) *ApplicationGroupUpdateOne {
	aguo.mutation.ResetUpdateAt()
	aguo.mutation.SetUpdateAt(u)
	return aguo
}

// AddUpdateAt adds u to the "update_at" field.
func (aguo *ApplicationGroupUpdateOne) AddUpdateAt(u uint32) *ApplicationGroupUpdateOne {
	aguo.mutation.AddUpdateAt(u)
	return aguo
}

// SetDeleteAt sets the "delete_at" field.
func (aguo *ApplicationGroupUpdateOne) SetDeleteAt(u uint32) *ApplicationGroupUpdateOne {
	aguo.mutation.ResetDeleteAt()
	aguo.mutation.SetDeleteAt(u)
	return aguo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (aguo *ApplicationGroupUpdateOne) SetNillableDeleteAt(u *uint32) *ApplicationGroupUpdateOne {
	if u != nil {
		aguo.SetDeleteAt(*u)
	}
	return aguo
}

// AddDeleteAt adds u to the "delete_at" field.
func (aguo *ApplicationGroupUpdateOne) AddDeleteAt(u uint32) *ApplicationGroupUpdateOne {
	aguo.mutation.AddDeleteAt(u)
	return aguo
}

// Mutation returns the ApplicationGroupMutation object of the builder.
func (aguo *ApplicationGroupUpdateOne) Mutation() *ApplicationGroupMutation {
	return aguo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aguo *ApplicationGroupUpdateOne) Select(field string, fields ...string) *ApplicationGroupUpdateOne {
	aguo.fields = append([]string{field}, fields...)
	return aguo
}

// Save executes the query and returns the updated ApplicationGroup entity.
func (aguo *ApplicationGroupUpdateOne) Save(ctx context.Context) (*ApplicationGroup, error) {
	var (
		err  error
		node *ApplicationGroup
	)
	aguo.defaults()
	if len(aguo.hooks) == 0 {
		node, err = aguo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApplicationGroupMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aguo.mutation = mutation
			node, err = aguo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aguo.hooks) - 1; i >= 0; i-- {
			if aguo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aguo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aguo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aguo *ApplicationGroupUpdateOne) SaveX(ctx context.Context) *ApplicationGroup {
	node, err := aguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aguo *ApplicationGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := aguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aguo *ApplicationGroupUpdateOne) ExecX(ctx context.Context) {
	if err := aguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aguo *ApplicationGroupUpdateOne) defaults() {
	if _, ok := aguo.mutation.UpdateAt(); !ok {
		v := applicationgroup.UpdateDefaultUpdateAt()
		aguo.mutation.SetUpdateAt(v)
	}
}

func (aguo *ApplicationGroupUpdateOne) sqlSave(ctx context.Context) (_node *ApplicationGroup, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   applicationgroup.Table,
			Columns: applicationgroup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: applicationgroup.FieldID,
			},
		},
	}
	id, ok := aguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ApplicationGroup.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := aguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, applicationgroup.FieldID)
		for _, f := range fields {
			if !applicationgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != applicationgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aguo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: applicationgroup.FieldAppID,
		})
	}
	if value, ok := aguo.mutation.GroupName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: applicationgroup.FieldGroupName,
		})
	}
	if value, ok := aguo.mutation.GroupLogo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: applicationgroup.FieldGroupLogo,
		})
	}
	if aguo.mutation.GroupLogoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: applicationgroup.FieldGroupLogo,
		})
	}
	if value, ok := aguo.mutation.GroupOwner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: applicationgroup.FieldGroupOwner,
		})
	}
	if value, ok := aguo.mutation.Annotation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: applicationgroup.FieldAnnotation,
		})
	}
	if aguo.mutation.AnnotationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: applicationgroup.FieldAnnotation,
		})
	}
	if value, ok := aguo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: applicationgroup.FieldCreateAt,
		})
	}
	if value, ok := aguo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: applicationgroup.FieldCreateAt,
		})
	}
	if value, ok := aguo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: applicationgroup.FieldUpdateAt,
		})
	}
	if value, ok := aguo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: applicationgroup.FieldUpdateAt,
		})
	}
	if value, ok := aguo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: applicationgroup.FieldDeleteAt,
		})
	}
	if value, ok := aguo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: applicationgroup.FieldDeleteAt,
		})
	}
	_node = &ApplicationGroup{config: aguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicationgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
